#!/bin/zsh
# hostblocker
#
# Reads domains from $XDG_CONFIG_HOME/hostblocker/blocked-domains and blocks them from being accessible.
# Each line in blocked-domains should contain a single domain (e.g., example.com)
#
# Usage:
#   hostblocker --enable   # enable / update blocklist
#   hostblocker --disable  # disable blocklist
#   hostblocker --status   # show blocked domains and their IPs
#
# After running, execute the following to verify.
#
#    sudo pfctl -sr
#
# This should return:
#   
#     block drop out quick from any to <blocked>
#
# To show the list of blocked IPs:
# 
#     sudo pfctl -t blocked -T show

CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/hostblocker"
DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/hostblocker"
BLOCKLIST_FILE="$CONFIG_DIR/blocked-domains"
CACHE_DB="$DATA_DIR/dns_cache.db"
TABLE_NAME="blocked"
RULE_FILE="/tmp/pf-blocklist.conf"
TTL_SECONDS=86400  # 24 hours

init_cache() {
  mkdir -p "$DATA_DIR"
  sqlite3 "$CACHE_DB" "CREATE TABLE IF NOT EXISTS dns_cache (domain TEXT PRIMARY KEY, ips TEXT, timestamp INTEGER);"
}

get_cached_ips() {
  local domain="$1"
  local cutoff=$(($(date +%s) - TTL_SECONDS))
  sqlite3 "$CACHE_DB" "SELECT ips FROM dns_cache WHERE domain='$domain' AND timestamp > $cutoff;" 2>/dev/null
}

cache_ips() {
  local domain="$1"
  local ips="$2"
  local timestamp=$(date +%s)
  sqlite3 "$CACHE_DB" "INSERT OR REPLACE INTO dns_cache (domain, ips, timestamp) VALUES ('$domain', '$ips', $timestamp);"
}

if [[ "$1" == "--disable" ]]; then
  echo "Disabling blocklist..."
  sudo pfctl -t "$TABLE_NAME" -T flush >/dev/null 2>&1
  echo "# blocklist disabled" | sudo pfctl -f -
  echo "Blocklist disabled."
  exit 0
fi

if [[ "$1" == "--status" ]]; then
  if [[ ! -f "$BLOCKLIST_FILE" ]]; then
    echo "Error: $BLOCKLIST_FILE not found."
    exit 1
  fi
  
  # Check if blocking is enabled
  if sudo pfctl -t "$TABLE_NAME" -T show >/dev/null 2>&1 && [[ -n "$(sudo pfctl -t "$TABLE_NAME" -T show 2>/dev/null)" ]]; then
    echo "Status: ENABLED"
  else
    echo "Status: DISABLED"
  fi
  echo
  
  printf "%-20s %s\n" "DOMAIN" "IPS"
  printf "%-20s %s\n" "------" "---"
  
  while IFS= read -r domain || [[ -n "$domain" ]]; do
    [[ -z "$domain" || "$domain" =~ ^# ]] && continue
    ips=($(dig +short "$domain" | grep -E '^[0-9.]+$'))
    if [[ -n "$ips" ]]; then
      printf "%-20s %s\n" "$domain" "${ips[*]}"
    else
      printf "%-20s %s\n" "$domain" "(no A records)"
    fi
  done < "$BLOCKLIST_FILE"
  exit 0
fi

if [[ "$1" != "--enable" ]]; then
  echo "Usage: hostblocker [--enable|--disable|--status]"
  exit 1
fi

if [[ ! -f "$BLOCKLIST_FILE" ]]; then
  echo "Error: $BLOCKLIST_FILE not found."
  exit 1
fi

init_cache
typeset -a IPLIST

while IFS= read -r domain || [[ -n "$domain" ]]; do
  [[ -z "$domain" || "$domain" =~ ^# ]] && continue

  cached_ips=$(get_cached_ips "$domain")
  if [[ -n "$cached_ips" ]]; then
    echo "Using cached IPs for $domain..."
    ips=(${(s:,:)cached_ips})
  else
    echo "Resolving $domain..."
    ips=($(dig +short "$domain" | grep -E '^[0-9.]+$'))
    if [[ -n "$ips" ]]; then
      cache_ips "$domain" "${(j:,:)ips}"
    else
      echo "  (no A records found)"
    fi
  fi
  
  if [[ -n "$ips" ]]; then
    IPLIST+=($ips)
  fi
done < "$BLOCKLIST_FILE"

if (( ${#IPLIST[@]} == 0 )); then
  echo "No IPs resolved â€” nothing to update."
  exit 0
fi

cat > "$RULE_FILE" <<EOF
table <$TABLE_NAME> persist
block drop out quick to <$TABLE_NAME>
EOF

echo "Loading pf rules..."
sudo pfctl -f "$RULE_FILE"

echo "Updating pf table <$TABLE_NAME> with:"
printf '%s\n' "${IPLIST[@]}"

sudo pfctl -t "$TABLE_NAME" -T replace "${IPLIST[@]}"
