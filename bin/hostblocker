#!/bin/zsh
# hostblocker
#
# Reads domains from $XDG_CONFIG_HOME/hostblocker/blocked-domains and blocks
# them from being accessible. Each line in blocked-domains should contain a
# single domain (e.g., example.com)
#
# Usage:
#   hostblocker --enable   # enable / update blocklist
#   hostblocker --disable  # disable blocklist
#   hostblocker --status   # show blocked domains and their IPs
#
# Motivation: Keep my muscle memory/ADHD from opening reddit etc. when I should
# be working :)

CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/hostblocker"
DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/hostblocker"
BLOCKLIST_FILE="$CONFIG_DIR/blocked-domains"
CACHE_DB="$DATA_DIR/dns_cache.db"
TABLE_NAME="blocked"
RULE_FILE="/tmp/pf-blocklist.conf"
TTL_SECONDS=86400  # 24 hours

init_cache() {
  mkdir -p "$DATA_DIR"
  sqlite3 "$CACHE_DB" "CREATE TABLE IF NOT EXISTS dns_cache (domain TEXT PRIMARY KEY, ips TEXT, timestamp INTEGER);"
}

get_cached_ips() {
  local domain="$1"
  local cutoff=$(($(date +%s) - TTL_SECONDS))
  sqlite3 "$CACHE_DB" "SELECT ips FROM dns_cache WHERE domain='$domain' AND timestamp > $cutoff;" 2>/dev/null
}

cache_ips() {
  local domain="$1"
  local ips="$2"
  local timestamp=$(date +%s)
  sqlite3 "$CACHE_DB" "INSERT OR REPLACE INTO dns_cache (domain, ips, timestamp) VALUES ('$domain', '$ips', $timestamp);"
}

format_blocking_message() {
  local ip_count="$1"
  local domain_count="$2"
  local ip_text="IP"
  local domain_text="domain"
  (( ip_count != 1 )) && ip_text="IPs"
  (( domain_count != 1 )) && domain_text="domains"
  echo "Blocking $ip_count $ip_text for $domain_count $domain_text from $BLOCKLIST_FILE"
}

if [[ "$1" == "--disable" ]]; then
  echo "Disabling blocklist..."
  sudo pfctl -t "$TABLE_NAME" -T flush >/dev/null 2>&1
  echo "# blocklist disabled" | sudo pfctl -f - >/dev/null 2>&1
  echo "blocking disabled"
  exit 0
fi

if [[ "$1" == "--status" ]]; then
  if [[ ! -f "$BLOCKLIST_FILE" ]]; then
    echo "Error: $BLOCKLIST_FILE not found."
    exit 1
  fi
  
  # Check if blocking is enabled
  if sudo pfctl -t "$TABLE_NAME" -T show >/dev/null 2>&1 && [[ -n "$(sudo pfctl -t "$TABLE_NAME" -T show 2>/dev/null)" ]]; then
    # Count domains and IPs
    domain_count=$(grep -v '^#' "$BLOCKLIST_FILE" | grep -v '^$' | wc -l | tr -d ' ')
    ip_count=$(sudo pfctl -t "$TABLE_NAME" -T show 2>/dev/null | wc -l | tr -d ' ')
    
    echo "Status: ENABLED"
    format_blocking_message "$ip_count" "$domain_count"
    echo
    
    printf "%-20s %s\n" "DOMAIN" "IPS"
    printf "%-20s %s\n" "------" "---"
    
    while IFS= read -r domain || [[ -n "$domain" ]]; do
      [[ -z "$domain" || "$domain" =~ ^# ]] && continue
      ips=($(dig +short "$domain" | grep -E '^[0-9.]+$'))
      if [[ -n "$ips" ]]; then
        printf "%-20s %s\n" "$domain" "${ips[*]}"
      else
        printf "%-20s %s\n" "$domain" "(no A records)"
      fi
    done < "$BLOCKLIST_FILE"
  else
    echo "Status: DISABLED"
  fi
  exit 0
fi

if [[ "$1" != "--enable" ]]; then
  echo "Usage: hostblocker [--enable|--disable|--status]"
  exit 1
fi

if [[ ! -f "$BLOCKLIST_FILE" ]]; then
  echo "Error: $BLOCKLIST_FILE not found."
  exit 1
fi

# Check if already enabled with same domains
if sudo pfctl -t "$TABLE_NAME" -T show >/dev/null 2>&1 && [[ -n "$(sudo pfctl -t "$TABLE_NAME" -T show 2>/dev/null)" ]]; then
  # Count domains in blocklist
  domain_count=$(grep -v '^#' "$BLOCKLIST_FILE" | grep -v '^$' | wc -l | tr -d ' ')
  if (( domain_count == 0 )); then
    echo "blocking already enabled"
    exit 0
  fi
  
  # Quick check - if we have blocked IPs and domains in file, assume already enabled
  echo "blocking already enabled"
  exit 0
fi

init_cache
typeset -a IPLIST
typeset -A CURRENT_IPS
typeset -i DOMAIN_COUNT=0

# Get currently blocked IPs
for ip in $(sudo pfctl -t "$TABLE_NAME" -T show 2>/dev/null); do
  CURRENT_IPS[$ip]=1
done

while IFS= read -r domain || [[ -n "$domain" ]]; do
  [[ -z "$domain" || "$domain" =~ ^# ]] && continue

  cached_ips=$(get_cached_ips "$domain")
  if [[ -n "$cached_ips" ]]; then
    ips=(${(s:,:)cached_ips})
    # Check if all IPs for this domain are already blocked
    all_blocked=true
    for ip in $ips; do
      if [[ -z "${CURRENT_IPS[$ip]}" ]]; then
        all_blocked=false
        break
      fi
    done
    if $all_blocked; then
      continue
    fi
  else
    echo "Resolving $domain..."
    ips=($(dig +short "$domain" | grep -E '^[0-9.]+$'))
    if [[ -n "$ips" ]]; then
      cache_ips "$domain" "${(j:,:)ips}"
    else
      echo "  (no A records found)"
    fi
  fi
  
  if [[ -n "$ips" ]]; then
    IPLIST+=($ips)
    ((DOMAIN_COUNT++))
  fi
done < "$BLOCKLIST_FILE"

if (( ${#IPLIST[@]} == 0 )); then
  echo "No IPs resolved â€” nothing to update."
  exit 0
fi

cat > "$RULE_FILE" <<EOF
table <$TABLE_NAME> persist
block drop out quick to <$TABLE_NAME>
EOF

if ! sudo pfctl -f "$RULE_FILE" >/dev/null 2>&1; then
  echo "Error loading pf rules"
  exit 1
fi

if ! sudo pfctl -t "$TABLE_NAME" -T replace "${IPLIST[@]}" >/dev/null 2>&1; then
  echo "Error updating pf table"
  exit 1
fi

format_blocking_message "${#IPLIST[@]}" "$DOMAIN_COUNT"
