#!/usr/bin/env ruby
# frozen_string_literal: true

# Sort the results of `git status` for use by our Ctrl-O widgets.

# Handle a single line returned from `git status --porcelain=v2`. Example:
# Simple changed entries look like this:
#   1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <path>
# Renamed entries:
#   2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath>
# Unmerged:
#   u <XY> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <path>
# New:
#   ? <path>
class StatusLine
  include Comparable

  attr_reader :type, :xy, :path

  def initialize(str)
    @line = str.split
    @type = @line[0]
    @xy = @type != '?' ? @line[1] : '??'
    @path = @line[-1]
  end

  def changed?
    type == '1'
  end

  def staged?
    changed? && !!(xy =~ /[AM]\./)
  end

  # @return [Time]
  def mtime
    File.new(path).mtime
  rescue
    Time.new(0) # just make it old
  end

  def <=>(other)
    return 1 if staged? && !other.staged?
    return -1 if !staged? && other.staged?

    mtime <=> other.mtime
  end

  def to_s
    xy_str = xy.gsub('.', ' ')
    "#{xy_str} #{path}"
  end
end

# Collection of StatusLines
class StatusLines
  include Enumerable

  def initialize
    statuses = `git status --porcelain=v2`.split("\n")
    @status_lines = [].tap do |ary|
      statuses.each do |line_str|
        ary << StatusLine.new(line_str)
      end
    end
  end

  def each(&block)
    @status_lines.each(&block)
  end
end

puts StatusLines.new.sort.each(&:to_s)
